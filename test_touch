#define USE_ARDUINO_INTERRUPTS true  // Set-up low-level interrupts for most acurate BPM math.
int Threshold = 550;
const int PulseWire = 0;
const int TOUCH_PIN = 7;
#include <PulseSensorPlayground.h>

#define x A1
#define y A2
#define z A3
int xsample = 0;
int ysample = 0;
int zsample = 0;
#define samples 10
#define minVal -50
#define MaxVal 50

PulseSensorPlayground pulseSensor;

int lastState = LOW;  // the previous state from the input pin
int currentState;     // the current reading from the input pin

void setup() {
  Serial.begin(9600);  //This opens up communications to the Serial monitor in the Arduino IDE
  Serial.println("successfully Initialized....");
  pinMode(TOUCH_PIN, INPUT);
  pulseSensor.analogInput(PulseWire);
  pulseSensor.setThreshold(Threshold);
  currentState = digitalRead(TOUCH_PIN);
  if (pulseSensor.begin()) {
    Serial.println("We created a pulseSensor Object !");  //This prints one time at Arduino power-up, or on Arduino reset.
  }

  for (int i = 0; i < samples; i++) {
    xsample += analogRead(x);
    ysample += analogRead(y);
    zsample += analogRead(z);
  }

  xsample /= samples;
  ysample /= samples;
  zsample /= samples;

  Serial.println(xsample);
  Serial.println(ysample);
  Serial.println(zsample);
  delay(1000);
}

void loop() {

  

//  int myBPM = pulseSensor.getBeatsPerMinute();    // Calls function on our pulseSensor object that returns BPM as an "int".
//  if (pulseSensor.sawStartOfBeat()) {             // Constantly test to see if "a beat happened".
//    Serial.println("â™¥ A HeartBeat Happened ! ");  // If test is "true", print a message "a heartbeat happened".
//    Serial.print("BPM: ");                        // Print phrase "BPM: "
//    Serial.println(myBPM);                        // Print the value inside of myBPM.
//    if (myBPM < 60) {
//      Serial.print("UR DROWSY ");
//    }
//  }
//  delay(2000);  // considered best practice in a simple sketch.

  //if (lastState == LOW && currentState == HIGH) {
  
    while ( currentState == HIGH  ) {
      currentState = digitalRead(TOUCH_PIN);
      Serial.print(" Sensor is touched ");

      int value1 = analogRead(x);
      int value2 = analogRead(y);
      int value3 = analogRead(z);

      int xValue = xsample - value1;
      int yValue = ysample - value2;
      int zValue = zsample - value3;

      Serial.print("x=");
      Serial.println(xValue);
      Serial.print("y=");
      Serial.println(yValue);
      Serial.print("z=");
      Serial.println(zValue);
      delay(1000);
      //condition for accident detection
      if (xValue < minVal || xValue > MaxVal || yValue < minVal || yValue > MaxVal || zValue < minVal || zValue > MaxVal) {  //in case of accident calling to a number 5 times if needed we can add multiple numbers.
        Serial.print("Accident detected \n");
      }
      delay(1000);
    }


  //}

  lastState = currentState;
}
